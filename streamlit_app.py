import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, roc_auc_score, f1_score, precision_score, recall_score, roc_curve, auc, confusion_matrix, classification_report
import numpy as np
import warnings
warnings.filterwarnings('ignore')

st.set_page_config(page_title="Anneal DataSet", page_icon="‚öôÔ∏è", layout="wide")

# ---- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----
file_path = "anneal.data"

@st.cache_data  # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
def load_data(file_path):
    data = pd.read_csv(file_path, sep=",", header=None, na_values=["?"])
    data.columns = [
        "famiily", "product-type", "steel", "carbon", "hardness", "temper-rolling", "condition", "formability",
        "strength", "non-ageing", "surface-finish", "surface-quality", "enamelability", "bc", "bf", "bt", "bw/me",
        "bl", "m", "chrom", "phos", "cbond", "marvi", "exptl", "ferro", "corr", "blue/bright/varn/clean",
        "lustre", "jurofm", "s", "p", "shape", "thick", "width", "len", "oil", "bore", "packing", "class"
    ]
    return data

data_original = load_data(file_path) # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
data = data_original.copy() # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

# ---- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----
# –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–º–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏–ª–∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã)
columns_to_drop = [
    "famiily", "temper-rolling", "non-ageing", "surface-finish", "enamelability", "bc", "bf", "bt", "bl", "m",
    "chrom", "phos", "cbond", "marvi", "exptl", "ferro", "corr", "blue/bright/varn/clean", "lustre", "jurofm",
    "s", "p", "oil", "packing", "bw/me"
]
data.drop(columns=columns_to_drop, inplace=True) # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
data.drop(columns=['carbon', 'hardness', 'strength', 'bore', 'product-type'], inplace=True) # –£–¥–∞–ª—è–µ–º –µ—â–µ –∫–æ–ª–æ–Ω–∫–∏
data.dropna(subset=["class"], inplace=True) # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏ –≤ 'class'

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –±–∏–Ω–∞—Ä–Ω—É—é (–¥–≤–µ –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Å–æ–≤)
class_counts = data["class"].value_counts()
if len(data["class"].unique()) > 2:
    median_freq = class_counts.median()
    group1 = class_counts[class_counts >= median_freq].index.tolist()
    data["binary_class"] = data["class"].apply(lambda x: 1 if x in group1 else 0) # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
else:
    data["binary_class"] = data["class"]
data.drop('class', axis=1, inplace=True) # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–ª–æ–Ω–∫—É 'class'

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –º–æ–¥–æ–π
categorical_cols = data.select_dtypes(include=['object']).columns
for col in categorical_cols:
    mode_value = data[col].mode()[0] # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥—É
    data[col].fillna(mode_value, inplace=True) # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–æ–π
median_formability = data['formability'].median() # –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É –¥–ª—è 'formability'
data['formability'].fillna(median_formability, inplace=True) # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–æ–π

# –ö–æ–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
label_encoder = LabelEncoder()
categorical_cols = data.select_dtypes(include=['object']).columns
for col in categorical_cols:
    data[col] = label_encoder.fit_transform(data[col]) # –ö–æ–¥–∏—Ä—É–µ–º

# ---- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ----
X = data.drop('binary_class', axis=1) # –ü—Ä–∏–∑–Ω–∞–∫–∏ - –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏, –∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤–æ–π
y = data['binary_class'] # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train –∏ test

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
scaler = StandardScaler()
numerical_cols = X_train.columns # –ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
X_train[numerical_cols] = scaler.fit_transform(X_train[numerical_cols]) # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º train
X_test[numerical_cols] = scaler.transform(X_test[numerical_cols]) # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º test

# ---- Streamlit App Layout ----
st.title("‚öôÔ∏è Anneal DataSet") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# ---- Sidebar for Controls ----
with st.sidebar:
    st.header("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    model_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", ["KNN", "Logistic Regression", "Decision Tree"]) # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏

    hyperparams = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if model_choice == "KNN": # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è KNN
        hyperparams['n_neighbors'] = st.slider("n_neighbors", min_value=1, max_value=20, value=3, step=1)
        hyperparams['weights'] = st.selectbox("weights", options=['uniform', 'distance'], index=0)
        hyperparams['metric'] = st.selectbox("metric", options=['minkowski', 'euclidean', 'manhattan', 'chebyshev'], index=0)
        hyperparams['p'] = st.slider("p (Minkowski distance power)", min_value=1, max_value=5, value=2, step=1)

    elif model_choice == "Logistic Regression": # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Logistic Regression
        hyperparams['C'] = st.slider("C (Regularization)", min_value=0.001, max_value=10.0, step=0.01, value=1.0, format="%.3f")
        hyperparams['penalty'] = st.selectbox("penalty", options=['l1', 'l2', 'none'], index=1)
        hyperparams['solver'] = st.selectbox("solver", options=['lbfgs', 'liblinear'], index=1)

    elif model_choice == "Decision Tree": # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Decision Tree
        hyperparams['criterion'] = st.selectbox("criterion", options=['gini', 'entropy'], index=0)
        hyperparams['max_depth'] = st.slider("max_depth", min_value=1, max_value=20, value=5, step=1)
        hyperparams['min_samples_split'] = st.slider("min_samples_split", min_value=2, max_value=20, value=2, step=1)
        hyperparams['min_samples_leaf'] = st.slider("min_samples_leaf", min_value=1, max_value=10, value=1, step=1)
        hyperparams['max_features'] = st.selectbox("max_features", options=['auto', 'sqrt', 'log2', None], index=3)

    st.markdown("---")
    st.header("üìä –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    available_features = X_train.columns.tolist() # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    default_features = ['formability', 'condition'] if all(f in available_features for f in ['formability', 'condition']) else available_features[:min(2, len(available_features))] # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_features = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:", available_features, default=default_features) # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    retrain_button = st.button("üî• –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å") # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å"

# ---- Data Exploration Section ----
expander_data_explore = st.expander("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", expanded=False) # –†–∞–∑–¥–µ–ª "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" –≤ expander
with expander_data_explore:
    st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.dataframe(data_original.head()) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    st.subheader("–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.dataframe(data.describe()) # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    binary_class_counts = data["binary_class"].value_counts() # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
    fig_class_dist = px.bar(binary_class_counts, x=binary_class_counts.index, y=binary_class_counts.values,
                             labels={'x': '–ö–ª–∞—Å—Å', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'}, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ (–ë–∏–Ω–∞—Ä–Ω–∞—è)") # Bar chart Plotly
    st.plotly_chart(fig_class_dist) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫

    st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏)") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    missing_percentage = data_original.isna().sum() / len(data_original) * 100 # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤
    missing_df = pd.DataFrame({'–ü—Ä–∏–∑–Ω–∞–∫': missing_percentage.index, '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤': missing_percentage.values}) # DataFrame –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
    missing_df = missing_df[missing_df['–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤'] > 0].sort_values(by='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤', ascending=False) # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º

    if not missing_df.empty: # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig_missing = px.bar(missing_df, x='–ü—Ä–∏–∑–Ω–∞–∫', y='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤',
                                labels={'–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤': '% –ø—Ä–æ–ø—É—Å–∫–æ–≤'},
                                title="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö") # Bar chart Plotly
        st.plotly_chart(fig_missing) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫
    else: # –ò–Ω–∞—á–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        st.info("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"): # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
        st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        feature_hist_cols = st.columns(3) # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 3 –∫–æ–ª–æ–Ω–∫–∏
        for i, col in enumerate(X_train.columns): # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            with feature_hist_cols[i % 3]: # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                fig_hist, ax_hist = plt.subplots() # –°–æ–∑–¥–∞–µ–º figure –∏ axes
                sns.histplot(data=X_train, x=col, kde=True, ax=ax_hist) # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ Seaborn
                ax_hist.set_title(col, fontsize=10) # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
                st.pyplot(fig_hist, use_container_width=True) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫


# ---- Model Training and Evaluation ----
if retrain_button or not st.session_state.get('models_trained', False): # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    st.session_state['models_trained'] = True # –§–ª–∞–≥, —á—Ç–æ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã

    if len(selected_features) < 2: # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –º–µ–Ω—å—à–µ 2 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π. –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.")
        X_train_selected = X_train[default_features[:min(2, len(default_features))]] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X_test_selected = X_test[default_features[:min(2, len(default_features))]]
    else:
        X_train_selected = X_train[selected_features] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X_test_selected = X_test[selected_features]

    # –í—ã–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if model_choice == "KNN":
        classifier = KNeighborsClassifier(**hyperparams) # KNN —Å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    elif model_choice == "Logistic Regression":
        classifier = LogisticRegression(max_iter=1000, random_state=42, class_weight='balanced', **hyperparams) # Logistic Regression —Å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    elif model_choice == "Decision Tree":
        classifier = DecisionTreeClassifier(random_state=42, **hyperparams) # Decision Tree —Å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    else:
        classifier = LogisticRegression() # Default –º–æ–¥–µ–ª—å

    classifier.fit(X_train_selected, y_train) # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    y_pred = classifier.predict(X_test_selected) # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–µ
    y_prob = classifier.predict_proba(X_test_selected)[:, 1] # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è ROC-AUC

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –≤ session_state
    st.session_state['classifier'] = classifier
    st.session_state['X_train_selected'] = X_train_selected
    st.session_state['y_train'] = y_train
    st.session_state['X_test_selected'] = X_test_selected
    st.session_state['y_test'] = y_test
    st.session_state['y_pred'] = y_pred
    st.session_state['y_prob'] = y_prob
    st.session_state['model_choice'] = model_choice
    st.session_state['hyperparams'] = hyperparams

# ---- Model Evaluation Display ----
st.header("üèÜ –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ü–µ–Ω–∫–∏
if st.session_state.get('models_trained', False): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞
    st.subheader(f"–ú–æ–¥–µ–ª—å: {st.session_state['model_choice']}") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    st.write(f"–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {st.session_state['hyperparams']}") # –í—ã–≤–æ–¥–∏–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    col_metrics, col_charts = st.columns(2) # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    with col_metrics:
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", f"{accuracy_score(st.session_state['y_test'], st.session_state['y_pred']):.3f}") # –ú–µ—Ç—Ä–∏–∫–∞ Accuracy
        st.metric("ROC AUC", f"{roc_auc_score(st.session_state['y_test'], st.session_state['y_prob']):.3f}") # –ú–µ—Ç—Ä–∏–∫–∞ ROC AUC
        st.metric("F1-–º–µ—Ä–∞ (F1 Score)", f"{f1_score(st.session_state['y_test'], st.session_state['y_pred']):.3f}") # –ú–µ—Ç—Ä–∏–∫–∞ F1-score

    with col_charts:
        # Confusion Matrix
        cm = confusion_matrix(st.session_state['y_test'], st.session_state['y_pred']) # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
        fig_cm, ax_cm = plt.subplots() # –°–æ–∑–¥–∞–µ–º figure –∏ axes
        sns.heatmap(cm, annot=True, fmt='d', cmap='viridis', ax=ax_cm) # Heatmap –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
        ax_cm.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã') # –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ x
        ax_cm.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã') # –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ y
        ax_cm.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (Confusion Matrix)') # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        st.pyplot(fig_cm) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫

        # ROC Curve
        fpr, tpr, thresholds = roc_curve(st.session_state['y_test'], st.session_state['y_prob']) # ROC –∫—Ä–∏–≤–∞—è
        roc_auc = auc(fpr, tpr) # AUC –∑–Ω–∞—á–µ–Ω–∏–µ

        fig_roc = px.area(
            x=fpr, y=tpr,
            title=f'ROC-–∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.2f})', # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ —Å AUC
            labels=dict(x='False Positive Rate', y='True Positive Rate'), # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        ) # Area chart Plotly –¥–ª—è ROC-–∫—Ä–∏–≤–æ–π
        fig_roc.add_shape(type='line', line=dict(dash='dash'), x0=0, x1=1, y0=0, y1=1) # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        fig_roc.update_traces(fillcolor='rgba(99, 255, 132, 0.6)') # –¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏ –∫—Ä–∏–≤–æ–π
        st.plotly_chart(fig_roc) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫

    st.subheader("–û—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏") # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.text(classification_report(st.session_state['y_test'], st.session_state['y_pred'])) # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

    # ---- Feature Importance (Decision Tree - Conditional) ----
    if st.session_state['model_choice'] == "Decision Tree" and isinstance(st.session_state['classifier'], DecisionTreeClassifier) and len(selected_features) >= 1: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è Decision Tree
        feature_importance = pd.DataFrame({'Feature': st.session_state['X_train_selected'].columns, 'Importance': st.session_state['classifier'].feature_importances_}) # DataFrame –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = feature_importance.sort_values('Importance', ascending=False) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏

        st.header("‚ú® –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        fig_feature_importance_plotly = px.bar(feature_importance, x='Importance', y='Feature', orientation='h',
                                                labels={'Importance': '–í–∞–∂–Ω–æ—Å—Ç—å', 'Feature': '–ü—Ä–∏–∑–Ω–∞–∫'},
                                                title='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Decision Tree)') # Bar chart Plotly –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.plotly_chart(fig_feature_importance_plotly) # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫

    # ---- AUC on Train/Test ----
    st.header("üìä AUC –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞—Ö") # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ AUC
    auc_train = auc(roc_curve(st.session_state['y_train'], st.session_state['classifier'].predict_proba(st.session_state['X_train_selected'])[:, 1])[0],
                    roc_curve(st.session_state['y_train'], st.session_state['classifier'].predict_proba(st.session_state['X_train_selected'])[:, 1])[1]) # AUC –Ω–∞ train
    auc_test = auc(roc_curve(st.session_state['y_test'], st.session_state['y_prob'])[0], roc_curve(st.session_state['y_test'], st.session_state['y_prob'])[1]) # AUC –Ω–∞ test
    col_auc_train, col_auc_test = st.columns(2) # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è AUC train –∏ test
    col_auc_train.metric("AUC –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ", f"{auc_train:.2f}") # –ú–µ—Ç—Ä–∏–∫–∞ AUC –Ω–∞ train
    col_auc_test.metric("AUC –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ", f"{auc_test:.2f}") # –ú–µ—Ç—Ä–∏–∫–∞ AUC –Ω–∞ test


else: # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –æ–±—É—á–µ–Ω–∞
    st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫—É –º–æ–¥–µ–ª–∏.")

st.markdown("---")
st.markdown("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π Jamshed Corporation —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å ZyplAI") # –ü–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É
